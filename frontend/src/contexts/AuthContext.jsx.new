import React, { createContext, useContext, useEffect, useState, useCallback } from 'react';
import firebase from 'firebase/app';
import 'firebase/auth';

// Firebase configuration
const firebaseConfig = {
  apiKey: "AIzaSyAx4cWyRyQc762CWg8nbuEEL7kecOpu38w",
  authDomain: "smartfarm-api-e7b4d.firebaseapp.com",
  projectId: "smartfarm-api-e7b4d",
  storageBucket: "smartfarm-api-e7b4d.firebasestorage.app",
  messagingSenderId: "713358372669",
  appId: "1:713358372669:web:27c0f7b527db9f98615f54"
};

// Initialize Firebase if it's not already initialized
if (!firebase.apps.length) {
  try {
    firebase.initializeApp(firebaseConfig);
    console.log('Firebase initialized successfully');
  } catch (error) {
    console.error('Error initializing Firebase:', error);
  }
}

// Get the auth instance
const auth = firebase.auth();

// Create auth context
const AuthContext = createContext();

export function AuthProvider({ children }) {
  const [currentUser, setCurrentUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  // Handle email/password login
  const login = async (email, password) => {
    try {
      setError('');
      setLoading(true);
      const userCredential = await auth.signInWithEmailAndPassword(email, password);
      return userCredential.user;
    } catch (error) {
      setError(error.message);
      throw error;
    } finally {
      setLoading(false);
    }
  };

  // Logout
  const logout = async () => {
    try {
      setLoading(true);
      await auth.signOut();
    } catch (error) {
      setError(error.message);
      throw error;
    } finally {
      setLoading(false);
    }
  };

  // Update user profile
  const updateProfile = async (updates) => {
    try {
      if (!currentUser) throw new Error('No user is currently logged in');
      
      // Update email if provided
      if (updates.email) {
        await currentUser.updateEmail(updates.email);
      }
      
      // Update password if provided
      if (updates.password) {
        await currentUser.updatePassword(updates.password);
      }
      
      // Update profile information
      if (updates.displayName || updates.photoURL) {
        await currentUser.updateProfile({
          displayName: updates.displayName || currentUser.displayName,
          photoURL: updates.photoURL || currentUser.photoURL,
        });
      }
      
      // Refresh user data
      await currentUser.reload();
      setCurrentUser({ ...auth.currentUser });
      
      return true;
    } catch (error) {
      console.error('Error updating profile:', error);
      setError(error.message);
      throw error;
    }
  };

  // Set up auth state listener
  useEffect(() => {
    const unsubscribe = auth.onAuthStateChanged(
      (user) => {
        setCurrentUser(user);
        setLoading(false);
      },
      (error) => {
        console.error('Auth state error:', error);
        setError(error.message);
        setLoading(false);
      }
    );

    return () => unsubscribe();
  }, []);

  const value = {
    currentUser,
    loading,
    error,
    login,
    logout,
    updateProfile,
    isAuthenticated: !!currentUser,
  };

  return (
    <AuthContext.Provider value={value}>
      {!loading && children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
}

export { auth };

export default AuthContext;
