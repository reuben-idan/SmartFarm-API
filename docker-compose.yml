version: '3.8'

services:
  # Django Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: smartfarm-backend
    restart: unless-stopped
    env_file: .env
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.${DJANGO_ENV}
      - PYTHONUNBUFFERED=1
    volumes:
      - ./backend:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    ports:
      - "8000:8000"
    depends_on:
      - db
      - redis
    networks:
      - smartfarm-network

  # PostgreSQL Database
  db:
    image: postgres:13-alpine
    container_name: smartfarm-db
    restart: unless-stopped
    env_file: .env
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ./scripts/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - smartfarm-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis for Caching and Celery
  redis:
    image: redis:6-alpine
    container_name: smartfarm-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - smartfarm-network

  # Celery Worker
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: smartfarm-celery-worker
    command: celery -A config worker --loglevel=info
    env_file: .env
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.${DJANGO_ENV}
      - PYTHONUNBUFFERED=1
    volumes:
      - ./backend:/app
    depends_on:
      - db
      - redis
    networks:
      - smartfarm-network

  # Celery Beat
  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: smartfarm-celery-beat
    command: celery -A config beat --loglevel=info
    env_file: .env
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.${DJANGO_ENV}
      - PYTHONUNBUFFERED=1
    volumes:
      - ./backend:/app
    depends_on:
      - db
      - redis
    networks:
      - smartfarm-network

  # Nginx
  nginx:
    image: nginx:1.21-alpine
    container_name: smartfarm-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - ./certs:/etc/letsencrypt
      - ./certs/www:/var/www/certbot
    depends_on:
      - backend
    networks:
      - smartfarm-network

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: smartfarm-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - VITE_API_URL=${VITE_API_URL:-http://localhost:8000/api/}
    networks:
      - smartfarm-network

# Volumes
volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:

# Networks
networks:
  smartfarm-network:
    driver: bridge
